
// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using NorthWindCoreLibrary.Data.Interceptors;
using NorthWindCoreLibrary.Models;
using Customers = NorthWindCoreLibrary.Models.Customers;

#nullable disable

namespace NorthWindCoreLibrary.Data
{
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Simple Logging
    /// https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/simple-logging
    /// </remarks>
    public partial class NorthwindContext : DbContext
    {

        private readonly StreamWriter _logStream;
        
        public NorthwindContext()
        {
#if !DEBUG
            try
            {
                _logStream = new("logging.txt", append: true);
            }
            catch (Exception exception)
            {

                Debug.WriteLine(exception.Message);


            }
#endif
        }

        public NorthwindContext(DbContextOptions<NorthwindContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BusinessEntityPhone> BusinessEntityPhone { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<ContactDevices> ContactDevices { get; set; }
        public virtual DbSet<ContactType> ContactType { get; set; }
        public virtual DbSet<Contacts> Contacts { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<EmployeeTerritories> EmployeeTerritories { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<PhoneType> PhoneType { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<Shippers> Shippers { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }
        public virtual DbSet<Territories> Territories { get; set; }

        /// <summary>
        /// Provides options for logging
        /// https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/simple-logging
        /// </summary>
        /// <param name="optionsBuilder"></param>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                // how we normally do a connection with scaffolding 
                //optionsBuilder.UseSqlServer("Data Source=.\\SQLEXPRESS;Initial Catalog=NorthWind2020;Integrated Security=True");
                
                StandardConnection(optionsBuilder);

            }
        }

        /// <summary>
        /// Configure for simple connection
        /// </summary>
        /// <param name="optionsBuilder"></param>
        private static void StandardConnection(DbContextOptionsBuilder optionsBuilder)
        {
            var config = ReadAppsettings(out var builder);

            optionsBuilder.UseSqlServer(Environment.UserName == "PayneK" ? 
                config.GetConnectionString("DatabaseConnection").Replace("_NOT", "") : 
                config.GetConnectionString("DatabaseConnection"));
        }
        /// <summary>
        /// Read connection string from appsettings.json
        /// </summary>
        /// <param name="builder"></param>
        /// <returns>Connection string</returns>
        /// <remarks>
        /// Next level (which I have coded) is to have three environment which can
        /// come from one or more appsettings files along with setting the environment
        /// via Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") for ASP.NET Core
        /// or a custom variable e.g. Environment.GetEnvironmentVariable("OED_ENVIRONMENT")
        /// </remarks>
        private static IConfigurationRoot ReadAppsettings(out IConfigurationBuilder builder)
        {
            builder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);
            IConfigurationRoot config = builder.Build();


            return config; // connection string
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new BusinessEntityPhoneConfiguration());
            modelBuilder.ApplyConfiguration(new CategoriesConfiguration());
            modelBuilder.ApplyConfiguration(new ContactDevicesConfiguration());
            modelBuilder.ApplyConfiguration(new ContactTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ContactsConfiguration());
            modelBuilder.ApplyConfiguration(new CountriesConfiguration());
            modelBuilder.ApplyConfiguration(new CustomersConfiguration());
            modelBuilder.ApplyConfiguration(new EmployeeTerritoriesConfiguration());
            modelBuilder.ApplyConfiguration(new EmployeesConfiguration());
            modelBuilder.ApplyConfiguration(new OrderDetailsConfiguration());
            modelBuilder.ApplyConfiguration(new OrdersConfiguration());
            modelBuilder.ApplyConfiguration(new PhoneTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ProductsConfiguration());
            modelBuilder.ApplyConfiguration(new RegionConfiguration());
            modelBuilder.ApplyConfiguration(new ShippersConfiguration());
            modelBuilder.ApplyConfiguration(new SuppliersConfiguration());
            modelBuilder.ApplyConfiguration(new TerritoriesConfiguration());

            // Only customers from Germany
            //modelBuilder.Entity<Customers>().HasQueryFilter(customer => customer.CountryIdentifier == 9);
            modelBuilder.HasDefaultSchema("dbo");
            
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
        #region Takes care of disposing stream used for logging
        public override void Dispose()
        {
            base.Dispose();
            
            #if !DEBUG
            _logStream.Dispose();
            #endif

        }

        public override async ValueTask DisposeAsync()
        {
            await base.DisposeAsync();
            #if !DEBUG
            if (_logStream is not null)
            {
                await _logStream.DisposeAsync();
            }
            #endif
            
        }
#endregion
    }
}
